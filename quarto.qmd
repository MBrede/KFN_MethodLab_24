---
toc-title: '![](imgs/magpie_quarto.webp){width=240px}<br> <h3>quarto</h3>'
kernel: knitr
---

# `quarto`{#sec-quarto}

`quarto` ist ein Markdown-basiertes Dokumenten-Format, mit dem Dokumente direkt in RStudio erstellt werden und Ergebnisse, Tabellen und Abbildungen eingebunden werden können. Dieses Skript hier wurde auch in `quarto` erstellt.

Dabei ist neben der direkten Einbindung von Auswertungen in das Dokument der große Vorteil, dass in verschiedene Ausgabeformate gerendert werden kann. Zum Beispiel können Dokumente parallel in ein Word-Dokument und ein `tex`-File exportiert werden.

In RStudio kann über File -> New File -> Quarto Document ein neues Dokument erstellt werden.
Daraufhin öffnet sich ein Dialog, in dem Einstellungen für das Dokument getroffen werden.

![Quarto-Dialog](imgs/quarto_dialogue.png){#fig-quartoDialogue}

Die Felder können erstmal ruhig so gelassen werden wie sie sind, alle Einstellungen lassen sich auch im Nachhinein anpassen.

Das neu erstellte Dokument wird (ab RStudio 1.4) als Standard im visuellen Editor geöffnet.

![Neu erstelltes Quarto-Dokument](imgs/new_quarto.png){#fig-newQuarto}

Quarto-Dokumente basieren auf zwei Teilen, die in einem file oder getrennt voneinander existieren können. Der erste Teil ist der sogenannte YAML-Header (1 in @fig-newQuarto), der die Parameter zum Rendern des Dokuments definiert - der zweite Teil ist das eigentliche Dokument(2).

Im neu erstellten file erkennen wir den YAML-Header durch die Eingrenzung aus je drei Bindestrichen. Nach der Erstellung sind hier schon der Titel des Dokuments "Untitled" und die Nutzung des visuellen Editors festgelegt.

Der Rest des Files ist ein Markdown-Dokument in dem mit [markdown-Formatierung](https://quarto.org/docs/authoring/markdown-basics.html) Fließtext geschrieben werden kann. Seit Einführung des visuellen Editors ist aber selbst diese Syntax nicht mehr nötig, Text kann wie aus anderen Verarbeitungsprogrammen bekannt mit den Bedienfeldern(3) formatiert werden. Durch Drücken der Source-Schaltfläche (4) kann aber auch immer noch in den Source-Editor zurückgekehrt werden.

Wie schon angedeutet ist quarto kein WYSIWYG^[What you see is what you get]-Editor, sondern erfordert das Rendern von Dokumenten. Dazu kann auf "Render"(5) geklickt oder `Strg + Shift + K` als Shortcut genutzt werden.
Auf diesen Befehl hin wird neben dem qmd-file ein Output generiert, in dem die formatierte Version zu finden ist. Beim ersten Rendern öffnet sich ein Dialog, in dem noch ein file-Name und Speicherort angegeben wird.


## Code-chunks

Der große Vorteil quartos ist es, dass wir Code-chunks im Dokument anlegen können, deren Output direkt in das gerenderte Ergebnis eingebunden wird.

Dazu kann mit der "Insert new code chunk"-Schaltfläche (1 in @fig-insert) oben rechts oder `Strg + Alt + I` ein neuer Chunk eingefügt werden, der an die Cursor-Stelle im Dokument eingefügt wird (2).

![Neuen Chunk erstellen.](imgs/new_chunk.png){#fig-insert}

In der ersten Zeile des neuen Chunks steht die Sprache. In den Chunk kann dann wie in ein R-Skript Code eingefügt werden.

:::: {.columns}
:::{.column width="50%"}
![Code Chunks mit bisherigen Analysen.](imgs/filled_chunks.png){#fig-filledAnalysis}
:::
:::{.column width="50%"}

In @fig-filledAnalysis ist das neue file mit dem Code für die Grafik aus @sec-ggplot eingefügt.

Der erste Chunk (1) ist dabei nur dafür da um Pakete und die Daten zu laden und ein theme zu setzen. Im zweiten Chunk (2) wird die Grafik erstellt. 

Wie in (3) und (4) zu sehen ist, kann zwischen den Chunks einfach Text eingefügt werden.

Die Chunks können dabei wie ein ganz normales R-Skript genutzt werden und der Code an der Zeile des Cursors kann mit `Strg + Enter` ausgeführt werden. Der Output erscheint dabei unter dem Chunk, kann mit Hilfe der Einstellungen aber auch in die Konsole verschoben werden.
:::
::::

Damit haben wir die Basics die wir brauchen.

## YAML-Header

Um das Ergebnis des Renderns anzupassen können wir den YAML-Header setzen.

Für dieses Skript konzentrieren wir uns auf Output im docx-Format, Quarto bietet aber [wesentlich mehr Optionen](https://quarto.org/docs/reference/).
Die Doku für alle unterstützten Header-Optionen für docx findet sich [hier](https://quarto.org/docs/reference/formats/docx.html).

Für uns sind erstmal die folgenden Parameter wichtig:

```
format: docx # setzt das Format des Outputs
fig-width: 6.56 # setzt 6.56 Zoll als Standard-Breite für alle Plot-Outputs
fig-dpi: 300 # setzt alle plots auf 300 dpi
```

Nach Klick auf "Render" kann ich neben dem erstellten qmd-file das in @fig-firstODT abgebildete Dokument finden.

![Erstes Render-Ergebnis.](imgs/first_odt_output.png){#fig-firstODT}

Der Output der Chunks wurde also erfolgreich in das Dokument übergeben, ich brauche aber die ganzen messages nicht.

Um diese zu unterdrücken kann ich den YAML-Header einfach um den folgenden Teil ergänzen:

```
execute:
  warning: false
  message: false
```

Execute im YAML-Header setzt dabei Ausführungsstandards für alle Code-Chunks im Dokument. `warning: false` unterdrückt alle Warnungen, `message: false` alle Nachrichten von Paketen, etc. im Output.

Was zu folgendem Output führt:

![Ergebnis ohne Nachrichten.](imgs/snd_odt_output.png){#fig-secondODT}
Schon viel besser, für einen Bericht stört aber noch der Code zwischen den Outputs. Um das Rausschreiben der Chunks zu unterdrücken ergänzen wir nur noch `echo: false` um bei folgendem vollständigen Header zu enden:
```
title: "Methoden"
editor: visual
format: docx
fig-width: 6.56
fig-dpi: 300
execute:
  warning: false
  message: false
  echo: false
```

Und schon ist das Ergebnis nicht mehr allzu schlecht:

![Ergebnis ohne Chunks](imgs/thrd_odt_output.png){#fig-thrdODT}

## Code-Chunk-Optionen

Die letzten drei Parameter waren Beispiele für chunk-Optionen, die das Verhalten von Chunks anpassen. Das kann entweder global im YAML-Header unter execute oder lokal pro Chunk gesetzt werden.

Auf der quarto-Seite gibt es einen Überblick über [alle Optionen](https://quarto.org/docs/reference/cells/cells-knitr.html), wir konzentrieren uns aber erstmal auf einen kleinen Teil zur Beschriftung von Grafiken.

Um eine Grafik zu beschriften und im Text referenzierbar zu machen, müssen wir zwei Optionen für den Chunk setzten:
`label` und `fig-cap`. In @fig-figChunk ist ein Beispiel wie das aussehen könnte. Die Chunk-Optionen werden dabei immer durch ein so genanntes "pipe-comment" eingeleitet.

![Chunk-Optionen für Grafiken](imgs/reference_figure.png){#fig-figChunk}

Im text können wir die Grafik dann mit \@fig-scatter referenzieren. Das label für Grafiken muss dabei durch "fig-" eingeleitet und referenziert werden, sonst schlägt die Formatierung fehl.

Der Output des so angepassten Skripts ist in @fig-forthRender zu sehen.

![Ergebnis mit Cross-Referenzen](imgs/forth_render.png){#fig-forthRender}

In dem Beispiel ist außerdem ein weiterer Vorteil von Quarto zu sehen: [Inline Code-Chunks](@sec-inline)

## Inline Code-Chunks {#sec-inline}

Im Fließtext kann mit der folgenden Syntax auf R zugegriffen und Output generiert werden:

```
`r <some code>`
```
Wozu ist das nützlich? Wir können so einfach statistische Kennwerte ohne sie kopieren zu müssen in den Text einfließen lassen! Und jedes mal wenn das Ergebnis erstellt wird, werden die Werte neu berechnet. So kann keine Aktualisierung vergessen werden.

Wir könnten unserem Beispiel-File so beispielsweise eine Stichprobenbeschreibung hinzufügen, wie in @fig-inlineCode zu sehen ist.

![Inline Chunk](imgs/inlineChunks.png){#fig-inlineCode}

Die Ergebnisse im docx können in @fig-inlineRes gesehen werden.

![Gerendertes Ergebnis der Inline-Chunks](imgs/inline_results.png){#fig-inlineRes}

Das hier gezeigte Beispiel ist auch im [Repo des Skripts](https://github.com/MBrede/KFN_MethodLab_24/blob/main/example.qmd) zugänglich. Außerdem sind dort alle für die Erstellung dieses Skripts nötigen files zu finden.

## Aufgabe

1. Übertragen Sie Ihre Ergebnisse aus den Aufgaben zu `tidymodels` in ein `quarto`-Dokument.

2. Beschriften Sie alle Grafiken.

3. Rendern Sie das Dokument als `docx`.

## Zusammenarbeit

Der größte Nachteil an Quarto ist der etwas umständlichere Workflow beim Kommentieren und Zusammenarbeiten als das in Word möglich ist.

Die Dokumente können zwar immer in word gerendert und dann ausgetauscht werden, etwaige Anmerkungen können aber nicht direkt in Quarto eingepflegt werden.

Unter [diesem Link](https://mbrede.github.io/blog/academic_collaboration_using_markdown_github/) findet sich aber eine Anleitung, wie man die Zusammenarbeit über git ermöglichen kann.

Außerdem ist dort auch eine Anleitung zu finden, wie sich im Source-Editor mit quarto zitieren lässt. Für das Zitieren im allgemeinen ist der [quarto-Guide](https://quarto.org/docs/authoring/footnotes-and-citations.html) zu diesem Thema ein guter Anlaufpunkt.